/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LandingImport } from './routes/landing'
import { Route as PublicImport } from './routes/_public'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutServicesImport } from './routes/_layout/services'
import { Route as LayoutClientsImport } from './routes/_layout/clients'
import { Route as LayoutCalendarImport } from './routes/_layout/calendar'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as PublicBookingUsernameIndexImport } from './routes/_public/booking/$username/index'
import { Route as PublicArtistUsernameIndexImport } from './routes/_public/artist/$username/index'
import { Route as PublicArtistUsernamePortfolioImport } from './routes/_public/artist/$username/portfolio'
import { Route as PublicArtistUsernameContactImport } from './routes/_public/artist/$username/contact'
import { Route as PublicArtistUsernameAboutImport } from './routes/_public/artist/$username/about'
import { Route as PublicBookingUsernameServicesIndexImport } from './routes/_public/booking/$username/services/index'
import { Route as PublicBookingUsernameServicesServiceIdIndexImport } from './routes/_public/booking/$username/services/$serviceId/index'
import { Route as PublicBookingUsernameAppointmentsAppointmentIdIndexImport } from './routes/_public/booking/$username/appointments/$appointmentId/index'

// Create/Update Routes

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutServicesRoute = LayoutServicesImport.update({
  path: '/services',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutClientsRoute = LayoutClientsImport.update({
  path: '/clients',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCalendarRoute = LayoutCalendarImport.update({
  path: '/calendar',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const PublicBookingUsernameIndexRoute = PublicBookingUsernameIndexImport.update(
  {
    path: '/booking/$username/',
    getParentRoute: () => PublicRoute,
  } as any,
)

const PublicArtistUsernameIndexRoute = PublicArtistUsernameIndexImport.update({
  path: '/artist/$username/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicArtistUsernamePortfolioRoute =
  PublicArtistUsernamePortfolioImport.update({
    path: '/artist/$username/portfolio',
    getParentRoute: () => PublicRoute,
  } as any)

const PublicArtistUsernameContactRoute =
  PublicArtistUsernameContactImport.update({
    path: '/artist/$username/contact',
    getParentRoute: () => PublicRoute,
  } as any)

const PublicArtistUsernameAboutRoute = PublicArtistUsernameAboutImport.update({
  path: '/artist/$username/about',
  getParentRoute: () => PublicRoute,
} as any)

const PublicBookingUsernameServicesIndexRoute =
  PublicBookingUsernameServicesIndexImport.update({
    path: '/booking/$username/services/',
    getParentRoute: () => PublicRoute,
  } as any)

const PublicBookingUsernameServicesServiceIdIndexRoute =
  PublicBookingUsernameServicesServiceIdIndexImport.update({
    path: '/booking/$username/services/$serviceId/',
    getParentRoute: () => PublicRoute,
  } as any)

const PublicBookingUsernameAppointmentsAppointmentIdIndexRoute =
  PublicBookingUsernameAppointmentsAppointmentIdIndexImport.update({
    path: '/booking/$username/appointments/$appointmentId/',
    getParentRoute: () => PublicRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/calendar': {
      preLoaderRoute: typeof LayoutCalendarImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/clients': {
      preLoaderRoute: typeof LayoutClientsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/services': {
      preLoaderRoute: typeof LayoutServicesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_public/artist/$username/about': {
      preLoaderRoute: typeof PublicArtistUsernameAboutImport
      parentRoute: typeof PublicImport
    }
    '/_public/artist/$username/contact': {
      preLoaderRoute: typeof PublicArtistUsernameContactImport
      parentRoute: typeof PublicImport
    }
    '/_public/artist/$username/portfolio': {
      preLoaderRoute: typeof PublicArtistUsernamePortfolioImport
      parentRoute: typeof PublicImport
    }
    '/_public/artist/$username/': {
      preLoaderRoute: typeof PublicArtistUsernameIndexImport
      parentRoute: typeof PublicImport
    }
    '/_public/booking/$username/': {
      preLoaderRoute: typeof PublicBookingUsernameIndexImport
      parentRoute: typeof PublicImport
    }
    '/_public/booking/$username/services/': {
      preLoaderRoute: typeof PublicBookingUsernameServicesIndexImport
      parentRoute: typeof PublicImport
    }
    '/_public/booking/$username/appointments/$appointmentId/': {
      preLoaderRoute: typeof PublicBookingUsernameAppointmentsAppointmentIdIndexImport
      parentRoute: typeof PublicImport
    }
    '/_public/booking/$username/services/$serviceId/': {
      preLoaderRoute: typeof PublicBookingUsernameServicesServiceIdIndexImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAdminRoute,
    LayoutCalendarRoute,
    LayoutClientsRoute,
    LayoutServicesRoute,
    LayoutSettingsRoute,
    LayoutIndexRoute,
  ]),
  PublicRoute.addChildren([
    PublicArtistUsernameAboutRoute,
    PublicArtistUsernameContactRoute,
    PublicArtistUsernamePortfolioRoute,
    PublicArtistUsernameIndexRoute,
    PublicBookingUsernameIndexRoute,
    PublicBookingUsernameServicesIndexRoute,
    PublicBookingUsernameAppointmentsAppointmentIdIndexRoute,
    PublicBookingUsernameServicesServiceIdIndexRoute,
  ]),
  LandingRoute,
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
])

/* prettier-ignore-end */
